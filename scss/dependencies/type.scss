@font-face{
	font-family:"franklin-gothic-compressed";
	font-weight:700;
	src: url('../fonts/ITCFranklinGothicStd-DmCp.otf');
}

%serif{
	font-family:"tiempos text", georgia, times, serif;	
}

%sans-serif{
	font-family:"franklin-gothic-urw", arial narrow, arial, sans-serif;
	
}

%sans-compressed{
	font-family:"franklin-gothic-urw-comp", impact, sans-serif;
}

%oldstyle-figures{
	font-variant-numeric: oldstyle-nums;
  -moz-font-feature-settings: "onum";
  -webkit-font-feature-settings: "onum";
  font-feature-settings: "onum";
}


/* --------------------------------------------------------

Remove the unit of a length
@param {Number} $number - Number to remove unit from
@return {Number} - Unitless number

-------------------------------------------------------- */
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


/* --------------------------------------------------------

Variable Map Lists for the text-size mixin

A specific text-size in this mixin is defined with a font-size and a leading.

For example,
  small: (64px, 72px)
  where small is the media query width defined in the $breakpoints map-list in _responsive.scss,
  64px is the font-size
  72px is the line-height (which will be converted to a unitless value for the browser in the mixin)


The definition of each font-size/leading pair can be different for each media query width.
This is an example of a font size with different definitions for each media query width:
  $medium: (
    base: (12px, 18px),
    small: (14px, 20px),
    medium: (16px, 24px),
    large: (18px, 28px),
    huge: (20px, 32px)
  ) !default;
This is generally an unusual situation because it would involve a pretty complicated typography system.


A more common example would be something like this:
  $xlarge: (
    base: (52px, 60px),
    small: (64px, 72px),
    medium: (64px, 72px),
    large: (72px, 80px),
    huge: (72px, 80px)
  ) !default;

This definition includes redundant repitition of values, so it can be defined more simply like this:
  $xlarge: (
    base: (52px, 60px),
    small: (64px, 72px),
    large: (72px, 80px)
  ) !default;

-------------------------------------------------------- */

// X-Small
$x-small:(
  base:(13px, 16px)
)!default;

// Small
$small:(
  base:(18px, 28px)
)!default;

// Medium

$medium:(
  base:(24px, 20px),
  medium:(42px, 36px)
)!default;


// Large
$large:(
  base:(36px, 28.8px),
  small:(54px, 43px),
  medium:(63px, 54px),
  large:(72px, 63px)
)!default;




// XL
$x-large:(
  base:(72px, 58px),
  small:(72px, 58px),
  medium:(120px, 96px),
  large:(150px, 120px)
)!default;


// XXL
$xx-large:(
  base:(48px, 48px),
  medium:(110px,110px)
)!default;



/* --------------------------------------------------------
Mixin for font-size and line-height definition
  Usage Example: @include text-size(large);

Font size can take on the following values:
  small, regular, medium, large, xlarge, xxlarge

If the mixin is called and values are not entered, it will default to regular font-size
-------------------------------------------------------- */

@mixin text-size($fs-map: $regular, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $keyNumber in $fs-map {

    @if map-has-key($fs-breakpoints, $fs-breakpoint) {
    } @else {
      @warn "Breakpoints have not been defined correctly";
    }

    // @debug $fs-breakpoint;
    // @debug $keyNumber;

    $fontSize: nth($keyNumber, 1);
    $leading: nth($keyNumber, 2);
    $leading-unitless: calc(#{strip-unit($leading)} / #{strip-unit($fontSize)});

    // @debug $fontSize;
    // @debug $leading;
    // @debug $leading-unitless;

    @include respond-above($fs-breakpoint) {
      font-size: $fontSize;
      line-height: $leading-unitless;
    };
  }
}